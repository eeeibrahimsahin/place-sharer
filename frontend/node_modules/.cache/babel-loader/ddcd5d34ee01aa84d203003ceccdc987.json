{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\lastVersion\\\\place-sharer\\\\frontend\\\\src\\\\shared\\\\components\\\\Navigation\\\\Notification.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Avatar from '../UIElements/Avatar';\nimport Modal from '../UIElements/Modal';\nimport Button from '../FormElements/Button';\nimport ErrorModal from '../UIElements/ErrorModal';\nimport LoadingSpinner from '../UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../hooks/http-hook';\nimport { AuthContext } from '../../context/auth-context';\nimport { NotifContext } from '../../context/notif-context';\nimport Badge from '@material-ui/core/Badge';\nimport Notifications from '@material-ui/icons/Notifications';\nimport './Notification.css';\n\nfunction Notification() {\n  const auth = useContext(AuthContext);\n  const {\n    setNotifFollower\n  } = useContext(NotifContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const [requestList, setRequestList] = useState([]);\n  const [toRender, setTorender] = useState(false);\n  useEffect(() => {\n    const getFriendsRequest = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/friends/requests/${auth.userId}`);\n        setRequestList(responseData.friendRequests);\n      } catch (err) {}\n    };\n\n    getFriendsRequest();\n  }, [sendRequest, auth.userId, toRender]);\n\n  const acceptRequest = async requesterUserId => {\n    try {\n      await sendRequest(`http://localhost:5000/api/friends/requests/accept`, 'PATCH', JSON.stringify({\n        userId: auth.userId,\n        friendId: requesterUserId\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      setNotifFollower(old => old + 1);\n      setTorender(!toRender);\n    } catch (err) {}\n  };\n\n  const rejectRequest = async requesterUserId => {\n    try {\n      await sendRequest(`http://localhost:5000/api/friends/requests/reject`, 'DELETE', JSON.stringify({\n        userId: auth.userId,\n        friendId: requesterUserId\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      setNotifFollower(old => old + 1);\n      setTorender(!toRender);\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"nav-links__button-not\",\n    onClick: () => setShowLoginModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    color: \"error\",\n    badgeContent: requestList.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"abbr\", {\n    title: \"Notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Notifications, {\n    className: \"nav-links__not\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    className: \"scroll\",\n    show: showLoginModal,\n    onCancel: () => setShowLoginModal(false),\n    footerClass: \"place-item__modal-actions\",\n    header: \"Friend Requests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 35\n    }\n  })), requestList.length > 0 ? requestList.map(request => /*#__PURE__*/React.createElement(\"li\", {\n    className: \"friendList\",\n    key: request.userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    image: request.image,\n    alt: request.name,\n    width: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, request.name.charAt(0).toUpperCase() + request.name.slice(1) + ' ', \"has sent you a friend request\"), /*#__PURE__*/React.createElement(Button, {\n    inverse: true,\n    onClick: () => {\n      acceptRequest(request.userId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  }, \"Confirm\"), /*#__PURE__*/React.createElement(Button, {\n    danger: true,\n    onClick: () => {\n      rejectRequest(request.userId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }, \"Reject\"))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"No Friend Request\")));\n}\n\nexport default Notification;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/lastVersion/place-sharer/frontend/src/shared/components/Navigation/Notification.js"],"names":["React","useState","useEffect","useContext","Avatar","Modal","Button","ErrorModal","LoadingSpinner","useHttpClient","AuthContext","NotifContext","Badge","Notifications","Notification","auth","setNotifFollower","isLoading","error","sendRequest","clearError","showLoginModal","setShowLoginModal","requestList","setRequestList","toRender","setTorender","getFriendsRequest","responseData","userId","friendRequests","err","acceptRequest","requesterUserId","JSON","stringify","friendId","Authorization","token","old","rejectRequest","length","textAlign","map","request","image","name","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport Avatar from '../UIElements/Avatar';\r\nimport Modal from '../UIElements/Modal';\r\nimport Button from '../FormElements/Button';\r\nimport ErrorModal from '../UIElements/ErrorModal';\r\nimport LoadingSpinner from '../UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../hooks/http-hook';\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport { NotifContext } from '../../context/notif-context';\r\n\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Notifications from '@material-ui/icons/Notifications';\r\n\r\nimport './Notification.css';\r\n\r\nfunction Notification() {\r\n    const auth = useContext(AuthContext);\r\n    const { setNotifFollower } = useContext(NotifContext);\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [showLoginModal, setShowLoginModal] = useState(false);\r\n    const [requestList, setRequestList] = useState([]);\r\n    const [toRender, setTorender] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getFriendsRequest = async () => {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `http://localhost:5000/api/friends/requests/${auth.userId}`\r\n                );\r\n\r\n                setRequestList(responseData.friendRequests);\r\n            } catch (err) {}\r\n        };\r\n        getFriendsRequest();\r\n    }, [sendRequest, auth.userId, toRender]);\r\n\r\n    const acceptRequest = async (requesterUserId) => {\r\n        try {\r\n            await sendRequest(\r\n                `http://localhost:5000/api/friends/requests/accept`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    userId: auth.userId,\r\n                    friendId: requesterUserId,\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + auth.token,\r\n                }\r\n            );\r\n            setNotifFollower((old) => old + 1);\r\n            setTorender(!toRender);\r\n        } catch (err) {}\r\n    };\r\n\r\n    const rejectRequest = async (requesterUserId) => {\r\n        try {\r\n            await sendRequest(\r\n                `http://localhost:5000/api/friends/requests/reject`,\r\n                'DELETE',\r\n                JSON.stringify({\r\n                    userId: auth.userId,\r\n                    friendId: requesterUserId,\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + auth.token,\r\n                }\r\n            );\r\n            setNotifFollower((old) => old + 1);\r\n            setTorender(!toRender);\r\n        } catch (err) {}\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"notif\">\r\n                <button\r\n                    className=\"nav-links__button-not\"\r\n                    onClick={() => setShowLoginModal(true)}\r\n                >\r\n                    <Badge color=\"error\" badgeContent={requestList.length}>\r\n                        <abbr title=\"Notifications\">\r\n                            <Notifications className=\"nav-links__not\" />\r\n                        </abbr>\r\n                    </Badge>\r\n                </button>\r\n            </div>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n\r\n            <Modal\r\n                className=\"scroll\"\r\n                show={showLoginModal}\r\n                onCancel={() => setShowLoginModal(false)}\r\n                footerClass=\"place-item__modal-actions\"\r\n                header=\"Friend Requests\"\r\n            >\r\n                <div style={{ textAlign: 'center' }}>\r\n                    {isLoading && <LoadingSpinner />}\r\n                </div>\r\n\r\n                {requestList.length > 0 ? (\r\n                    requestList.map((request) => (\r\n                        <li className=\"friendList\" key={request.userId}>\r\n                            <Avatar\r\n                                image={request.image}\r\n                                alt={request.name}\r\n                                width=\"50px\"\r\n                            />\r\n                            <p>\r\n                                {request.name.charAt(0).toUpperCase() +\r\n                                    request.name.slice(1) +\r\n                                    ' '}\r\n                                has sent you a friend request\r\n                            </p>\r\n                            <Button\r\n                                inverse\r\n                                onClick={() => {\r\n                                    acceptRequest(request.userId);\r\n                                }}\r\n                            >\r\n                                Confirm\r\n                            </Button>\r\n                            <Button\r\n                                danger\r\n                                onClick={() => {\r\n                                    rejectRequest(request.userId);\r\n                                }}\r\n                            >\r\n                                Reject\r\n                            </Button>\r\n                        </li>\r\n                    ))\r\n                ) : (\r\n                    <p>No Friend Request</p>\r\n                )}\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Notification;\r\n"]},"metadata":{},"sourceType":"module"}